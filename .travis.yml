language: cpp
dist: trusty
sudo: false

compiler:
  - gcc
  - clang

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-6
      - libopenmpi-dev
      - openmpi-bin
      - python-numpy
      - libblas-dev
      - liblapack-dev

env:
  global:
    - HWLOC_HIDE_ERRORS=1
    - PRECICE_ROOT="$TRAVIS_BUILD_DIR"
    - LOCAL_INSTALL="$HOME/local"
    - PETSC_ARCH=arch-linux2-c-debug
    - PETSC_DIR=$LOCAL_INSTALL/petsc
    - CPLUS_INCLUDE_PATH="$PETSC_DIR/include:$PETSC_DIR/$PETSC_ARCH/include:$LOCAL_INSTALL/include:$LOCAL_INSTALL/eigen3:$CPLUS_INCLUDE_PATH"
    - LD_LIBRARY_PATH="$PETSC_DIR/$PETSC_ARCH/lib:$LOCAL_INSTALL/lib:$LD_LIBRARY_PATH"
    - LIBRARY_PATH="$PETSC_DIR/$PETSC_ARCH/lib:$LOCAL_INSTALL/lib:$LIBRARY_PATH"
    - PYTHONPATH="$PETSC_DIR/$PETSC_ARCH/lib:/usr/lib/python2.7:/usr/lib/python2.7/dist-packages:/usr/lib/python2.7/plat-x86_64-linux-gnu"
    - EIGEN3_ROOT_DIR=${LOCAL_INSTALL}
    - BOOST_ROOT=${LOCAL_INSTALL}

  matrix:
    - MPI=on PETSC=on
    - MPI=on PETSC=off
    - MPI=off PETSC=off

matrix:
  include:

      # testing builds on cmake
    - if: type = cron or branch = master
      compiler: gcc
      env: BUILD_TYPE=CMAKE MPI=on PETSC=on
    - if: type = cron or branch = master
      compiler: gcc
      env: BUILD_TYPE=CMAKE MPI=on PETSC=off
    - if: type = cron or branch = master
      compiler: gcc
      env: BUILD_TYPE=CMAKE MPI=off PETSC=off
    - if: type = cron or branch = master
      compiler: clang
      env: BUILD_TYPE=CMAKE MPI=on PETSC=on
    - if: type = cron or branch = master
      compiler: clang
      env: BUILD_TYPE=CMAKE MPI=on PETSC=off
    - if: type = cron or branch = master
      compiler: clang
      env: BUILD_TYPE=CMAKE MPI=off PETSC=off

      # testing  builds on  18.04 in docker container
    - if: type = cron or branch = master
      name: "Ubuntu 18.04 build check"
      services:
        - docker
      os: linux
      before_install:
      cache:
      install:
      before_script:
      addons:
      # just make sure build is succesfull, don't do any tests
      script:  docker build -f tools/.travis/Dockerfile.precice1804 .
      after_success:
      after_failure:

      # testing  builds on 16.04 in docker container
    - if: type = cron or branch = master
      name: "Ubuntu 16.04 build check"
      services:
        - docker
      os: linux
      before_install:
      cache:
      install:
      before_script:
      addons:
      # just make sure build is succesfull, don't do any tests
      script:  docker build -f tools/.travis/Dockerfile.precice1604 .
      after_success:
      after_failure:

      # testing on macOS
    - if: type = cron or branch = master
      os: osx
      addons:
        homebrew:
        packages:
          - python
          - scons
          - libxml2
      compiler: clang
      env: BUILD_TYPE=CMAKE MPI=on PETSC=on
    - if: type = cron or branch = master
      os: osx
      addons:
        homebrew:
        packages:
          - python
          - scons
          - libxml2
      compiler: clang
      env: BUILD_TYPE=CMAKE MPI=on PETSC=off
    - if: type = cron or branch = master
      os: osx
      addons:
        homebrew:
        packages:
          - python
          - scons
          - libxml2
      compiler: clang
      env: BUILD_TYPE=CMAKE MPI=off PETSC=off

    - name: "Spack build"
      os: linux
      cache:
        apt: true
        directories:
          - $HOME/.cache
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
            - environment-modules
            - gfortran
      before_install:
        - export CXX=g++-4.9
        - export CC=gcc-4.9
        - export FC=gfortran-4.9
        - export CXXFLAGS="-std=c++11"
        - export SPACK_ROOT=$HOME/.cache/spack
        - export PATH=$PATH:$HOME/.cache/spack/bin

      install:
        - if ! which spack >/dev/null; then
            mkdir -p $SPACK_ROOT &&
            git clone --depth 50 https://github.com/spack/spack.git $SPACK_ROOT &&
            echo -e "config:""\n  build_jobs:"" 2" > $SPACK_ROOT/etc/spack/config.yaml;
          fi
        - travis_wait spack install cmake@3.7.2~openssl~ncurses
        - travis_wait spack install boost@1.60.0  -atomic -chrono -date_time -exception -graph -iostreams -locale -math -random -regex -serialization -signals -timer -wave
        - travis_wait 30 spack install eigen@3.3.1 -fftw -metis -mpfr -scotch -suitesparse
        - travis_wait 30 spack install precice ^boost@1.60.0  -atomic -chrono -date_time -exception -graph -iostreams -locale -math -random -regex -serialization -signals -timer -wave ^eigen@3.3.1 -fftw -metis -mpfr -scotch -suitesparse
        - spack clean -a

      before_script:
      # just make sure build is succesfull, don't do any tests
      script:
      after_success:
      after_failure:

  allow_failures:
    - os: osx


cache:
  directories:
    - $LOCAL_INSTALL

before_install:
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export PETSC_ARCH=arch-darwin-c-debug; else export PETSC_ARCH=arch-linux2-c-debug; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew cask uninstall oclint; brew install open-mpi; fi
  - if [ "$CXX" = "g++" ]; then export CXX="g++-6" && export CC="gcc-6"; fi
  - export OMPI_CXX=$CXX
  - if [ "$MPI" = "on" ]; then export CXX="mpicxx"; fi

install:
  - $TRAVIS_BUILD_DIR/tools/travis-install-dependencies.sh $LOCAL_INSTALL
  - export PATH=${LOCAL_INSTALL}/cmake/bin:${PATH}

before_script:
  - mkdir $TRAVIS_BUILD_DIR/build
  - mkdir $TRAVIS_BUILD_DIR/tests

script: |
    set -e
    if [ "$BUILD_TYPE" = "CMAKE" ]; then
      export PRECICE_BUILD_DIR=$TRAVIS_BUILD_DIR/build
      cd $TRAVIS_BUILD_DIR/build
      cmake -DPETSC=$PETSC -DMPI=$MPI -DPYTHON=on -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX ..
      cmake --build .
    else
      export PRECICE_BUILD_DIR=$TRAVIS_BUILD_DIR/build/last
      cd $TRAVIS_BUILD_DIR
      scons -j 2 petsc=$PETSC mpi=$MPI python=on compiler=$CXX staticlib bin solib tests symlink
    fi
    cd $TRAVIS_BUILD_DIR/tests
    if [ "$MPI" = "off" ]; then $PRECICE_BUILD_DIR/testprecice -x -r detailed > boost-test-output; fi
    if [ "$MPI" = "on"  ]; then mpirun.openmpi -n 4 --output-filename boost-test-output  $PRECICE_BUILD_DIR/testprecice -r detailed; fi

after_failure:
  - cd $TRAVIS_BUILD_DIR
  - cat config.log
  - cat -n ./tests/boost-test-output*
